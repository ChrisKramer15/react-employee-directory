{"version":3,"sources":["components/Header/index.js","API.js","components/Table/index.js","components/Directory/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","axios","get","listEmployees","props","arr","employees","filter","employee","name","first","toUpperCase","includes","search","scope","onClick","map","element","i","key","href","alt","src","picture","small","last","phone","email","dob","date","Directory","state","isSorted","employeeAPI","API","then","res","setState","data","results","catch","err","console","log","handleInputChange","event","target","value","handleSort","allEmployees","sort","a","b","name1","name2","toLowerCase","this","onChange","placeholder","Table","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.03e70c85.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <div className=\"jumbotron jumbotron-fluid header\">\r\n        <div className=\"container\">\r\n          <h1>Employee Directory</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\nexport default {\r\n  getUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction listEmployees(props) {\r\n  const arr = props.employees.filter((employee) =>\r\n    employee.name.first.toUpperCase().includes(props.search.toUpperCase())\r\n  );\r\n  return (\r\n    <div>\r\n      <div>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <p>\r\n                  <em>Profile Picture</em>\r\n                </p>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <p name=\"name\" onClick={props.onClick}>\r\n                  Name\r\n                </p>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <p name=\"phone\" onClick={props.onClick}>\r\n                  Phone Number\r\n                </p>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <p name=\"email\" onClick={props.onClick}>\r\n                  Email\r\n                </p>\r\n              </th>\r\n              <th scope=\"col\">\r\n                <p name=\"dob\" onClick={props.onClick}>\r\n                  Date of Birth\r\n                </p>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {arr.map((element, i) => {\r\n              return (\r\n                <tr key={i}>\r\n                  <td>\r\n                    <a href={\"mailto:element.email\"}>\r\n                      <img\r\n                        className=\"profPic\"\r\n                        alt={element.name}\r\n                        src={element.picture.small}\r\n                      ></img>\r\n                    </a>\r\n                  </td>\r\n                  <td>\r\n                    <strong>\r\n                      {element.name.first} {element.name.last}\r\n                    </strong>\r\n                  </td>\r\n                  <td>{element.phone}</td>\r\n                  <td>\r\n                    <a href={\"mailto:element.email\"}>{element.email}</a>\r\n                  </td>\r\n                  <td>{element.dob.date}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default listEmployees;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../../API\";\r\nimport Table from \"../Table\";\r\nimport \"./style.css\";\r\n\r\nclass Directory extends Component {\r\n  state = {\r\n    employees: [],\r\n    search: \"\",\r\n    isSorted: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.employeeAPI();\r\n  }\r\n\r\n  employeeAPI = () => {\r\n    API.getUsers()\r\n      .then((res) => {\r\n        this.setState({ employees: res.data.results });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const search = event.target.value;\r\n\r\n    this.setState({ search });\r\n  };\r\n\r\n  handleSort = (event) => {\r\n    const allEmployees = [...this.state.employees];\r\n    const sort = event.target.name;\r\n    if (this.state.isSorted === false) {\r\n      allEmployees.sort((a, b) => {\r\n        var name1;\r\n        var name2;\r\n        if (sort !== \"name\") {\r\n          name1 = +a[sort];\r\n          name2 = +b[sort];\r\n        } else {\r\n          name1 = a[sort].first.toLowerCase();\r\n          name2 = b[sort].first.toLowerCase();\r\n        }\r\n        if (name1 < name2) {\r\n          return -1;\r\n        }\r\n        if (name1 > name2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n      this.setState({ employees: allEmployees, isSorted: true });\r\n    } else {\r\n      allEmployees.sort((a, b) => {\r\n        let name1;\r\n        let name2;\r\n        if (sort !== \"name\") {\r\n          name1 = +a[sort];\r\n          name2 = +b[sort];\r\n        } else {\r\n          name1 = a[sort].first.toLowerCase();\r\n          name2 = b[sort].first.toLowerCase();\r\n        }\r\n        if (name1 < name2) {\r\n          return 1;\r\n        }\r\n        if (name1 > name2) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n      this.setState({ employees: allEmployees, isSorted: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <input\r\n                className=\"form-control\"\r\n                value={this.state.search}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Search for employee\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Table\r\n              employees={this.state.employees}\r\n              search={this.state.search}\r\n              onClick={this.handleSort}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Directory;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Directory from \"./components/Directory\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Directory />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}